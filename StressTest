#!/bin/bash
TC_GENERATOR_FILE="tc_generator.cpp"
MAX_TESTS=10000
BRUTE_FILE="b.cpp"
MAIN_FILE="a.cpp"
compile() {
    local cpp_file="$1"
    local executable="$2"
    g++ -std=c++20 "${cpp_file}" -o "${executable}" || { echo "Error when compiling ${cpp_file}"; exit 1; }
}
cleanup() {
    rm -f input1.txt generator original brute original_output.txt brute_output.txt
}
stress_test() {
    local diff_found=0
    echo "Testing ${MAX_TESTS} cases:"

    for ((i=0; i<MAX_TESTS; i++)); do
        ./generator > input1.txt
        ./original < input1.txt > original_output.txt
        ./brute < input1.txt > brute_output.txt

        if diff --side-by-side --ignore-space-change original_output.txt brute_output.txt > /dev/null; then
            echo "pass"
        else
            echo "test_case #$i: failed"
            diff_found=1
            break
        fi
    done
    if [[ $diff_found -eq 1 ]]; then
        echo "Input:"
        cat input1.txt
        echo "Output:"
        cat original_output.txt
        echo "Expected:"
        cat brute_output.txt
    fi
}
main() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -b) BRUTE_FILE="$2"; shift 2 ;;
            -m) MAIN_FILE="$2"; shift 2 ;;
            -t) MAX_TESTS="$2"; shift 2 ;;
            -h) echo "Usage: $(basename "$0") -b <brute-file> -m <main-file> [-t <test-cases>]"; exit ;;
            *) echo "Unknown option $1"; exit 1 ;;
        esac
    done
    compile "${TC_GENERATOR_FILE}" "generator"
    compile "${MAIN_FILE}" "original"
    compile "${BRUTE_FILE}" "brute"
    stress_test
    cleanup
}
main "$@"
